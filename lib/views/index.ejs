<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="manifest" href="/manifest.json">
    <title>Facebook Event to iCal Converter</title>
    <style>
      #current-download {
        display: none;
      }

      #list {}

      .row {
        display: flex;
        align-items: center;
        flex-wrap: wrap;
      }

      input#url {
        flex: 1;
      }

      #form {
        flex: 1;
        display: flex;
        min-width: 300px;
      }

      #status {
        flex: 1;
        height: 1rem;
      }

      .status-item {
        display: none;
        min-width: 200px;
      }

      .show {
        display: block;
      }

      .hidden {
        display: none;
      }
    </style>
  </head>

  <body>
    <a id="current-download" href="javascript:void(0)"></a>
    <h1>Facebook Events to iCal Converter</h1>

    <p>
      Insert Facebook event URL into the form. When you submit it
      you will get <a href="https://en.wikipedia.org/wiki/ICalendar"><code>ics</code></a>
      file that you can import
      into your calendar.
    </p>

    <div class="row">
      <form action='/download' method='POST' id="form">
        <input id="url" type='text' name='url' placeholder='Paste / type FB event URL here...' />
        <input id="submit" type='submit' value='Submit' />
      </form>
      <div id="status">
        <div class="status-item" id="network">
          Fetching file...
        </div>
        <div class="status-item" id="parsing">
          Parsing data...
        </div>
        <div class="status-item" id="error">
        </div>
        <div class="status-item" id="service-worker">
        </div>
      </div>
    </div>

    <br />

    <label for="nojs">
      <input id="nojs" type="checkbox" />
      No JavaScript
    </label>

    <br />
    <br />

    <table id="list" class="hidden">
      <thead>
        <tr>
          <td>#</td>
          <td>Link</td>
          <td>Created at</td>
        </tr>
      </thead>
      <tbody>
      </tbody>
    </table>


    <script>
      (() => {
        const noJS = () => {
          return Boolean(document.querySelector("#nojs").checked)
        }

        const useStorage = Boolean(window.localStorage)

        if (!window.fetch || !window.Promise || !window.URLSearchParams) {
          console.info('JS features not available.')
          return
        }

        const getStorage = () => {
          if (!useStorage) {
            return null
          }

          const storage = localStorage.getItem('fb-to-ical-events')

          if (!storage) {
            localStorage.setItem('fb-to-ical-events', JSON.stringify([]))
            return "[]"
          }

          return storage
        }

        const getStorageContents = (storage) => {
          return JSON.parse(storage)
        }

        const updateStorage = (storageContents) => {
          const encodedStorage = JSON.stringify(storageContents)

          localStorage.setItem('fb-to-ical-events', encodedStorage)
        }

        const saveRecord = (order, link, createdAt, title) => {
          if (!useStorage) {
            return
          }

          const storage = getStorage()
          const storageContents = getStorageContents(storage)

          const record = {
            order,
            link,
            createdAt: createdAt.toString(),
            title,
          }

          updateStorage([ ...storageContents, record ])
        }

        const showTable = () => {
          list.classList.remove('hidden')
        }

        const insertTableRow = ({ order, link, createdAt, title }) => {
          showTable()

          const row = document.createElement('tr')

          const orderCol = document.createElement('td')
          orderCol.innerText = order

          const linkElement = document.createElement('a')
          linkElement.setAttribute('href', link)
          linkElement.innerText = 'Download'

          const linkCol = document.createElement('td')
          linkCol.appendChild(linkElement)

          const createdAtCol = document.createElement('td')
          const parsedCreatedAt = new Date(createdAt)
          createdAtCol.innerText = (parsedCreatedAt || new Date()).toLocaleString()

          const titleCol = document.createElement('td')
          titleCol.innerText = title

          const newRow = document.createElement('tr')

          newRow.appendChild(orderCol)
          newRow.appendChild(linkCol)
          newRow.appendChild(createdAtCol)
          newRow.appendChild(titleCol)

          tableBody.appendChild(newRow)
        }

        const createRecord = (uri, summary) => {
          const order = tableBody.querySelectorAll('tr').length + 1
          const createdAt = new Date()

          saveRecord(order, uri, createdAt, summary)
          insertTableRow({
            order,
            link: uri,
            createdAt,
            title: summary,
          })
        }

        const hydrateList = () => {
          if (!useStorage) {
            return
          }

          const storage = getStorage()
          const storageContents = getStorageContents(storage)

          if (storageContents.length > 0) {
            showTable()
          }

          storageContents
            .sort((a, b) => {
              if (a.order < b.order) {
                return -1
              }
              if (a.order > b.order) {
                return 1
              }
              return 0
            })
            .forEach((record) => {
              insertTableRow(record)
            })
        }

        const clearStatuses = () => {
          document.querySelectorAll('.status-item').forEach((item) => {
            item.classList.remove('show')
          })
        }

        const setStatusDownloading = () => {
          clearStatuses()
          document.querySelector('#network').classList.add('show')
        }

        const setStatusParsing = () => {
          clearStatuses()
          document.querySelector('#parsing').classList.add('show')
        }

        const setStatusError = (err) => {
          clearStatuses()
          const error = document.querySelector('#error')
          error.innerText = err.toString()
          error.classList.add('show')
        }

        const setServiceWorkerStatus = (status) => {
          clearStatuses()
          const sw = document.querySelector('#service-worker')
          sw.innerText = status
          status ? sw.classList.add('show') : sw.classList.remove('show')
        }

        const pendingRequest = () => {
          input.disabled = true
          submitButton.disabled = true
          setStatusDownloading()
        }

        const finishedRequest = () => {
          input.disabled = false
          submitButton.disabled = false
          clearStatuses()
        }

        const handleError = (error) => {
          console.error(error)
          finishedRequest()
          setStatusError(error)
        }

        const postURL = (data) => {
          return new Promise((resolve, reject) => {
            fetch('/download', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
              },
              body: data,
            }).then((response) => {
              if (response.status === 500) {
                reject(response.statusText)
                return
              }
              finishedRequest()
              resolve(response)
            }).catch(reject)
          })
        }

        const form = document.querySelector('form')
        const submitButton = document.querySelector("#submit")
        const input = document.querySelector("#url")
        const link = document.querySelector("#current-download")
        const table = document.querySelector('#list')
        const tableBody = table.querySelector('tbody')
        const noJScheckbox = document.querySelector('#nojs')

        const loadNoJS = () => {
          if (!useStorage) {
            return
          }
          const value = localStorage.getItem('fb-to-ical-nojs')
          noJScheckbox.checked = value ? JSON.parse(value) : false
        }

        loadNoJS()

        if (window.navigator && window.navigator.serviceWorker && !noJS()) {
          const serviceWorker = window.navigator.serviceWorker
          serviceWorker.register('service-worker.js', {
            scope: './',
          }).then((registration) => {
            setServiceWorkerStatus(`Service worker registered with scope ${registration.scope}`)
            setTimeout(() => {
              setServiceWorkerStatus('')
            }, 4500)
          }).catch((err) => {
            setServiceWorkerStatus(`Service worker error: ${err.toString()}`)
          })
        }

        if (!noJS()) {
          hydrateList()
        }

        noJScheckbox.addEventListener('click', (event) => {
          if (!useStorage) {
            return
          }

          localStorage.setItem('fb-to-ical-nojs', event.target.checked)
        })

        submitButton.addEventListener('click', (event) => {
          if (noJS()) {
            return
          }

          event.preventDefault()

          const formData = new URLSearchParams()
          formData.set('url', input.value)

          pendingRequest()

          postURL(formData)
            .then((res) => {
              res.text()
                .then((text) => {
                  setStatusParsing()
                  const dataUri = encodeURIComponent(text)
                  const uri = `data:text/calendar;charset=utf-8,${dataUri}`

                  link.setAttribute('href', uri)
                  link.setAttribute('download', 'download.ics')
                  link.click()

                  input.value = ''

                  const summaryMatch = text.match(/SUMMARY:.*/)[0]
                  const summary = summaryMatch ? summaryMatch.replace(/SUMMARY:/, '') : ''

                  createRecord(uri, summary)
                  clearStatuses()
                })
                .catch((err) => {
                  handleError(err)
                })
            })
            .catch((err) => {
              handleError(err)
            })
        })
      })()
    </script>
  </body>
</html>
